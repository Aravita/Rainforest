/*
 * zap-ext-vga32.h
 *
 *  Created on: Apr 15, 2025
 *      Author: aravita
 */

#ifndef FMGL_FONTS_INCLUDE_FREESANS32_H_
#define FMGL_FONTS_INCLUDE_FREESANS32_H_

#include "../../include/fmgl.h"

/**
 * Character height.
 */
#define FMGL_FONT_FREESANS_32_CHARACTER_HEIGHT 32

/**
 * Wrong character width.
 */
#define FMGL_FONT_FREESANS_32_WRONG_CHARACTER_WIDTH 26

/**
 * Character code of first font glyphs array element.
 */
#define FMGL_FONT_FREESANS_32_FIRST_CHARACTER_CODE 0x20U

/**
 * Glyphs table size
 */
#define FMGL_FONT_FREESANS_32_CHARACTERS_TABLE_LENGTH 30U

/**
 * Call this function to get font instance.
 */
FMGL_API_Font FMGL_FontFreeSans32Init(void);

/**
 * Returns character width.
 * @param character Character code.
 * @return Character width.
 */
uint16_t FMGL_FontFreeSans32GetCharacterWidth (uint8_t character);

/**
 * Returns character raster.
 * @param character Character code.
 * @return Pointer to raster data.
 */
const uint8_t* FMGL_FontFreeSans32GetCharacterRaster(uint8_t character);

/**
 * Characters widths.
 */
static const uint8_t FMGL_FontFreeSans32CharactersWidths[FMGL_FONT_FREESANS_32_CHARACTERS_TABLE_LENGTH] =
{
	8, /* 0x20 - Space */
	11, /* 0x21 - ! */
	11, /* 0x22 - " */
	18, /* 0x23 - # */
	18, /* 0x24 - $ */
	28, /* 0x25 - % */
	21, /*0x26 - & */
	8, /*0x27 - ' */
	11, /* 0x28 - ( */
	11, /* 0x29 - ) */
	13, /* 0x2A - * */
	19, /* 0x2B - + */
	9, /* 0x2C - , */
	19, /* 0x2D - - */
	8, /* 0x2E - . */
	9, /* 0x2F - / */

	18, /* 0x30 - 0 */
	18, /* 0x31 - 1 */
	18, /* 0x32 - 2 */
	18, /* 0x33 - 3 */
	18, /* 0x34 - 4 */
	18, /* 0x35 - 5 */
	18, /* 0x36 - 6 */
	18, /* 0x37 - 7 */
	18, /* 0x38 - 8 */
	18, /* 0x39 - 9 */
	8, /* 0x3A - : */
	8, /* 0x3B - ; */
	19, /* 0x3C - < */
	19, /* 0x3D - = */
/*	{ 0x00, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00 },  0x3E - >
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x08, 0x04, 0x00, 0x04, 0x04, 0x00, 0x00 },  0x3F - ?

	{ 0x00, 0x00, 0x0E, 0x11, 0x19, 0x15, 0x15, 0x19, 0x01, 0x1E, 0x00, 0x00 },  0x40 - @
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00, 0x00 },  0x41 - A
	{ 0x00, 0x00, 0x0F, 0x11, 0x11, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 },  0x42 - B
	{ 0x00, 0x00, 0x0E, 0x11, 0x01, 0x01, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00 },  0x43 - C
	{ 0x00, 0x00, 0x07, 0x09, 0x11, 0x11, 0x11, 0x11, 0x09, 0x07, 0x00, 0x00 },  0x44 - D
	{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x00 },  0x45 - E
	{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00 },  0x46 - F
	{ 0x00, 0x00, 0x0E, 0x11, 0x01, 0x01, 0x1D, 0x11, 0x11, 0x0E, 0x00, 0x00 },  0x47 - G
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 },  0x48 - H
	{ 0x00, 0x00, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },  0x49 - I
	{ 0x00, 0x00, 0x1C, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x06, 0x00, 0x00 },  0x4A - J
	{ 0x00, 0x00, 0x11, 0x09, 0x05, 0x03, 0x03, 0x05, 0x09, 0x11, 0x00, 0x00 },  0x4B - K
	{ 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x00 },  0x4C - L
	{ 0x00, 0x00, 0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 },  0x4D - M
	{ 0x00, 0x00, 0x11, 0x11, 0x13, 0x15, 0x19, 0x11, 0x11, 0x11, 0x00, 0x00 },  0x4E - N
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },  0x4F - O

	{ 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x01, 0x01, 0x01, 0x00, 0x00 },  0x50 - P
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x15, 0x0E, 0x10, 0x00 },  0x51 - Q
	{ 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x05, 0x09, 0x11, 0x00, 0x00 },  0x52 - R
	{ 0x00, 0x00, 0x0E, 0x11, 0x01, 0x0E, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 },  0x53 - S
	{ 0x00, 0x00, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 },  0x54 - T
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },  0x55 - U
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x0A, 0x0A, 0x04, 0x04, 0x00, 0x00 },  0x56 - V
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11, 0x00, 0x00 },  0x57 - W
	{ 0x00, 0x00, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x0A, 0x11, 0x11, 0x00, 0x00 },  0x58 - X
	{ 0x00, 0x00, 0x11, 0x11, 0x0A, 0x0A, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 },  0x59 - Y
	{ 0x00, 0x00, 0x1F, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0x1F, 0x00, 0x00 },  0x5A - Z
	{ 0x00, 0x00, 0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E, 0x00, 0x00 },  0x5B - [
	{ 0x00, 0x00, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x00, 0x00 },  0x5C - \
	{ 0x00, 0x00, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00, 0x00 },  0x5D - ]
	{ 0x00, 0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x5E - ^
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00 },  0x5F - _

	{ 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x60 - `
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x1E, 0x11, 0x11, 0x1E, 0x00, 0x00 },  0x61 - a
	{ 0x00, 0x00, 0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 },  0x62 - b
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00 },  0x63 - c
	{ 0x00, 0x00, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00, 0x00 },  0x64 - d
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x1F, 0x01, 0x01, 0x1E, 0x00, 0x00 },  0x65 - e
	{ 0x00, 0x00, 0x18, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 },  0x66 - f
	{ 0x00, 0x00, 0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x0E },  0x67 - g
	{ 0x00, 0x00, 0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 },  0x68 - h
	{ 0x00, 0x04, 0x04, 0x00, 0x06, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },  0x69 - i
	{ 0x00, 0x10, 0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x12, 0x0C },  0x6A - j
	{ 0x00, 0x00, 0x02, 0x02, 0x12, 0x0A, 0x06, 0x06, 0x0A, 0x12, 0x00, 0x00 },  0x6B - k
	{ 0x00, 0x00, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },  0x6C - l
	{ 0x00, 0x00, 0x00, 0x00, 0x0F, 0x15, 0x15, 0x15, 0x15, 0x15, 0x00, 0x00 },  0x6D - m
	{ 0x00, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 },  0x6E - n
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },  0x6F - o

	{ 0x00, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x0F, 0x01, 0x01 },  0x70 - p
	{ 0x00, 0x00, 0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x10 },  0x71 - q
	{ 0x00, 0x00, 0x00, 0x00, 0x1D, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00 },  0x72 - r
	{ 0x00, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x0E, 0x10, 0x10, 0x0F, 0x00, 0x00 },  0x73 - s
	{ 0x00, 0x00, 0x04, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x18, 0x00, 0x00 },  0x74 - t
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00, 0x00 },  0x75 - u
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x0A, 0x0A, 0x04, 0x04, 0x00, 0x00 },  0x76 - v
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x15, 0x0E, 0x00, 0x00 },  0x77 - w
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x0A, 0x04, 0x04, 0x0A, 0x11, 0x00, 0x00 },  0x78 - x
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x0E },  0x79 - y
	{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x08, 0x04, 0x02, 0x01, 0x1F, 0x00, 0x00 },  0x7A - z
	{ 0x00, 0x00, 0x18, 0x04, 0x04, 0x02, 0x04, 0x04, 0x04, 0x18, 0x00, 0x00 },  0x7B - {
	{ 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 },  0x7C - |
	{ 0x00, 0x00, 0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x08, 0x06, 0x00, 0x00 },  0x7D - }
	{ 0x00, 0x12, 0x15, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x7E - ~
	{ 0x00, 0x00, 0x3F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x3F, 0x00, 0x00 },  0x7F - Wrong character

	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x80 - Forms light horizontal
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },  0x81 - Forms light vertical
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },  0x82 - Forms light down and right
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },  0x83 - Forms light down and left
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x84 - Forms light up and right
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x85 - Forms light up and left
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },  0x86 - Forms light vertical and right
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },  0x87 - Forms light vertical and left
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },  0x88 - Forms light down and horizontal
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x89 - Forms light up and horizontal
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x3F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },  0x8A - Forms light vertical and horizontal
	{ 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x8B - Upper half block
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F },  0x8C - Lower half block
	{ 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F },  0x8D - Full block
	{ 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07 },  0x8E - Left half block
	{ 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38 },  0x8F - Right half block

	{ 0x09, 0x24, 0x09, 0x24, 0x09, 0x24, 0x09, 0x24, 0x09, 0x24, 0x09, 0x24 },  0x90 - Light shade
	{ 0x15, 0x2A, 0x15, 0x2A, 0x15, 0x2A, 0x15, 0x2A, 0x15, 0x2A, 0x15, 0x2A },  0x91 - Medium shade
	{ 0x1B, 0x2D, 0x1B, 0x2D, 0x1B, 0x2D, 0x1B, 0x2D, 0x1B, 0x2D, 0x1B, 0x2D },  0x92 - Dark shade
	{ 0x00, 0x00, 0x08, 0x14, 0x14, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },  0x93 - Top half integral
	{ 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00 },  0x94 - Black small square
	{ 0x00, 0x00, 0x00, 0x00, 0x0C, 0x1E, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00 },  0x95 - Bullet operator
	{ 0x00, 0x30, 0x10, 0x10, 0x10, 0x11, 0x11, 0x12, 0x14, 0x18, 0x00, 0x00 },  0x96 - Square root
	{ 0x00, 0x00, 0x00, 0x00, 0x16, 0x0D, 0x00, 0x16, 0x0D, 0x00, 0x00, 0x00 },  0x97 - Almost equal to
	{ 0x00, 0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00, 0x1F, 0x00, 0x00 },  0x98 - Less than or equal to
	{ 0x00, 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00, 0x1F, 0x00, 0x00 },  0x99 - Greater than or equal to
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x9A - Non-breaking space
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x02, 0x00, 0x00 },  0x9B - Bottom half integral
	{ 0x00, 0x04, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x9C - Degree sign
	{ 0x00, 0x0C, 0x12, 0x08, 0x04, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x9D - Superscript digit two
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 },  0x9E - Middle dot
	{ 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x1F, 0x00, 0x04, 0x04, 0x00, 0x00 },  0x9F - Division sign

	{ 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00 },  0xA0 - Forms double horizontal
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xA1 - Forms double vertical
	{ 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04 },  0xA2 - Forms down single and right double
	{ 0x00, 0x00, 0x0A, 0x0A, 0x0E, 0x11, 0x1F, 0x01, 0x01, 0x1E, 0x00, 0x00 },  0xA3 - ё
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xA4 - Forms down double and right single
	{ 0x00, 0x00, 0x00, 0x00, 0x3E, 0x02, 0x3A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xA5 - Forms double down and right
	{ 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04 },  0xA6 - Forms down single and left double
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xA7 - Forms down double and left single
	{ 0x00, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xA8 - Forms double down and left
	{ 0x04, 0x04, 0x04, 0x04, 0x3C, 0x04, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00 },  0xA9 - Forms up single and right double
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0xAA - Forms up double and right single
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x3A, 0x02, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00 },  0xAB - Forms double up and right
	{ 0x04, 0x04, 0x04, 0x04, 0x07, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00 },  0xAC - Forms up single and left double
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0xAD - Forms up double and left single
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x08, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00 },  0xAE - Forms double up and left
	{ 0x04, 0x04, 0x04, 0x04, 0x3C, 0x04, 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04 },  0xAF - Forms vertical single and right double

	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x3A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xB0 - Forms vertical double and right single
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x3A, 0x02, 0x3A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xB1 - Forms double vertical and right
	{ 0x04, 0x04, 0x04, 0x04, 0x07, 0x04, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04 },  0xB2 - Forms vertical single and left double
	{ 0x0A, 0x0A, 0x1F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x00 },  0xB3 - Ё
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xB4 - Forms vertical double and left single
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x08, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xB5 - Forms double vertical and left
	{ 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x04, 0x04, 0x04, 0x04, 0x04 },  0xB6 - Forms down single and horizontal double
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xB7 - Forms down double and horizontal single
	{ 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xB8 - Forms double down and horizontal
	{ 0x04, 0x04, 0x04, 0x04, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00 },  0xB9 - Forms up single and horizontal double
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  0xBA - Forms up double and horizontal single
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x3B, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00 },  0xBB - Forms double up and horizontal
	{ 0x04, 0x04, 0x04, 0x04, 0x3F, 0x04, 0x3F, 0x04, 0x04, 0x04, 0x04, 0x04 },  0xBC - Forms vertical single and horizontal double
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x3F, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xBD - Forms vertical double and horizontal single
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x3B, 0x00, 0x3B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A },  0xBE - Forms double vertical and horizontal
	{ 0x00, 0x00, 0x1E, 0x21, 0x2D, 0x25, 0x25, 0x2D, 0x21, 0x1E, 0x00, 0x00 },  0xBF - Copyright sign

	{ 0x00, 0x00, 0x00, 0x00, 0x09, 0x15, 0x15, 0x17, 0x15, 0x09, 0x00, 0x00 },  0xC0 - ю
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x1E, 0x11, 0x11, 0x1E, 0x00, 0x00 },  0xC1 - а
	{ 0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 },  0xC2 - б
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x3E, 0x20, 0x20 },  0xC3 - ц
	{ 0x00, 0x00, 0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x0E },  0xC4 - д
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x1F, 0x01, 0x01, 0x1E, 0x00, 0x00 },  0xC5 - е
	{ 0x00, 0x00, 0x00, 0x04, 0x0E, 0x15, 0x15, 0x15, 0x15, 0x0E, 0x04, 0x00 },  0xC6 - ф
	{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00 },  0xC7 - г
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x0A, 0x04, 0x04, 0x0A, 0x11, 0x00, 0x00 },  0xC8 - х
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00, 0x00 },  0xC9 - и
	{ 0x00, 0x00, 0x0A, 0x04, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00, 0x00 },  0xCA - й
	{ 0x00, 0x00, 0x00, 0x00, 0x12, 0x0A, 0x06, 0x06, 0x0A, 0x12, 0x00, 0x00 },  0xCB - к
	{ 0x00, 0x00, 0x00, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x12, 0x11, 0x00, 0x00 },  0xCC - л
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x00, 0x00 },  0xCD - м
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00, 0x00 },  0xCE - н
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },  0xCF - о

	{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 },  0xD0 - п
	{ 0x00, 0x00, 0x00, 0x00, 0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x00, 0x00 },  0xD1 - я
	{ 0x00, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x0F, 0x01, 0x01 },  0xD2 - р
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00 },  0xD3 - с
	{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 },  0xD4 - т
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x0E },  0xD5 - у
	{ 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x0E, 0x15, 0x15, 0x15, 0x00, 0x00 },  0xD6 - ж
	{ 0x00, 0x00, 0x07, 0x09, 0x09, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 },  0xD7 - в
	{ 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0E, 0x12, 0x12, 0x0E, 0x00, 0x00 },  0xD8 - ь
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x13, 0x15, 0x15, 0x13, 0x00, 0x00 },  0xD9 - ы
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x0C, 0x10, 0x11, 0x0E, 0x00, 0x00 },  0xDA - з
	{ 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x15, 0x1E, 0x00, 0x00 },  0xDB - ш
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x1C, 0x10, 0x11, 0x0E, 0x00, 0x00 },  0xDC - э
	{ 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x15, 0x3E, 0x20, 0x20 },  0xDD - щ
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x00, 0x00 },  0xDE - ч
	{ 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x0E, 0x12, 0x12, 0x0E, 0x00, 0x00 },  0xDF - ъ

	{ 0x00, 0x00, 0x09, 0x15, 0x15, 0x15, 0x17, 0x15, 0x15, 0x09, 0x00, 0x00 },  0xE0 - Ю
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00, 0x00 },  0xE1 - А
	{ 0x00, 0x00, 0x0F, 0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 },  0xE2 - Б
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x3E, 0x20, 0x20 },  0xE3 - Ц
	{ 0x00, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x3F, 0x21, 0x00 },  0xE4 - Д
	{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x00 },  0xE5 - Е
	{ 0x00, 0x04, 0x0E, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x0E, 0x04, 0x00 },  0xE6 - Ф
	{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00 },  0xE7 - Г
	{ 0x00, 0x00, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x0A, 0x11, 0x11, 0x00, 0x00 },  0xE8 - Х
	{ 0x00, 0x00, 0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x11, 0x00, 0x00 },  0xE9 - И
	{ 0x0A, 0x04, 0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x11, 0x00, 0x00 },  0xEA - Й
	{ 0x00, 0x00, 0x11, 0x09, 0x05, 0x03, 0x03, 0x05, 0x09, 0x11, 0x00, 0x00 },  0xEB - К
	{ 0x00, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x00, 0x00 },  0xEC - Л
	{ 0x00, 0x00, 0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 },  0xED - М
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 },  0xEE - Н
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },  0xEF - О

	{ 0x00, 0x00, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 },  0xF0 - П
	{ 0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11, 0x00, 0x00 },  0xF1 - Я
	{ 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x01, 0x01, 0x01, 0x00, 0x00 },  0xF2 - Р
	{ 0x00, 0x00, 0x0E, 0x11, 0x01, 0x01, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00 },  0xF3 - С
	{ 0x00, 0x00, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 },  0xF4 - Т
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x0E, 0x00, 0x00 },  0xF5 - У
	{ 0x00, 0x00, 0x15, 0x15, 0x15, 0x0E, 0x0E, 0x15, 0x15, 0x15, 0x00, 0x00 },  0xF6 - Ж
	{ 0x00, 0x00, 0x0F, 0x11, 0x11, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 },  0xF7 - В
	{ 0x00, 0x00, 0x02, 0x02, 0x0E, 0x12, 0x12, 0x12, 0x12, 0x0E, 0x00, 0x00 },  0xF8 - Ь
	{ 0x00, 0x00, 0x11, 0x11, 0x13, 0x15, 0x15, 0x15, 0x15, 0x13, 0x00, 0x00 },  0xF9 - Ы
	{ 0x00, 0x00, 0x0E, 0x11, 0x10, 0x0C, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 },  0xFA - З
	{ 0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x1E, 0x00, 0x00 },  0xFB - Ш
	{ 0x00, 0x00, 0x0E, 0x11, 0x10, 0x1C, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 },  0xFC - Э
	{ 0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x3E, 0x20, 0x20 },  0xFD - Щ
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10, 0x00, 0x00 },  0xFE - Ч
	{ 0x00, 0x00, 0x03, 0x02, 0x0E, 0x12, 0x12, 0x12, 0x12, 0x0E, 0x00, 0x00 },  0xFF - Ъ */
};

/* Wrong character */
static const uint8_t FMGL_FontFreeSans32CharactersWrong[128] =
{
	0xfc, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0x00, 0x0c, 0x00, 0xc0, 0x00,
	0x04, 0xfc, 0x80, 0x00, 0x04, 0xfe, 0x83, 0x00, 0x04, 0x87, 0x87, 0x00,
	0x84, 0x01, 0x86, 0x00, 0x84, 0x01, 0x8e, 0x00, 0x84, 0x01, 0x8e, 0x00,
	0x84, 0x00, 0x8e, 0x00, 0x04, 0x00, 0x86, 0x00, 0x04, 0x00, 0x86, 0x00,
	0x04, 0x00, 0x87, 0x00, 0x04, 0x80, 0x83, 0x00, 0x04, 0xc0, 0x81, 0x00,
	0x04, 0x60, 0x80, 0x00, 0x04, 0x70, 0x80, 0x00, 0x04, 0x30, 0x80, 0x00,
	0x04, 0x30, 0x80, 0x00, 0x04, 0x30, 0x80, 0x00, 0x04, 0x00, 0x80, 0x00,
	0x04, 0x00, 0x80, 0x00, 0x04, 0x00, 0x80, 0x00, 0x04, 0x00, 0x80, 0x00,
	0x04, 0x30, 0x80, 0x00, 0x04, 0x30, 0x80, 0x00, 0x04, 0x00, 0x80, 0x00,
	0x0c, 0x00, 0xc0, 0x00, 0xfc, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x20 - Space */
static const uint8_t FMGL_FontFreeSans32Characters_Space[32] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x21 - Exclamation mark */
static const uint8_t FMGL_FontFreeSans32Characters_Exclam[64] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
	0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
	0x30, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00,
	0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
	0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00
};

/* 0x22 - Double quote */
static const uint8_t FMGL_FontFreeSans32Characters_DoubleQuote[64] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x01, 0x8c, 0x01, 0x8c, 0x01,
	0x8c, 0x01, 0x8c, 0x01, 0x8c, 0x01, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00
};

/* 0x23 - Number sign */
static const uint8_t FMGL_FontFreeSans32Characters_Numbersign[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x61, 0x00, 0x80, 0x60, 0x00, 0x80, 0x60, 0x00, 0xc0, 0x60, 0x00,
	0xc0, 0x20, 0x00, 0xc0, 0x30, 0x00, 0xfc, 0xff, 0x01, 0xe0, 0x38, 0x00,
	0x60, 0x30, 0x00, 0x60, 0x10, 0x00, 0x60, 0x18, 0x00, 0x60, 0x18, 0x00,
	0x20, 0x18, 0x00, 0x70, 0x1c, 0x00, 0xfe, 0xff, 0x00, 0x30, 0x1c, 0x00,
	0x30, 0x0c, 0x00, 0x10, 0x0c, 0x00, 0x10, 0x0c, 0x00, 0x18, 0x0c, 0x00,
	0x18, 0x04, 0x00, 0x18, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x24 - Dollar */
static const uint8_t FMGL_FontFreeSans32Characters_Dollar[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc0, 0x0f, 0x00,
	0xf0, 0x3f, 0x00, 0x18, 0x71, 0x00, 0x0c, 0x61, 0x00, 0x0c, 0x41, 0x00,
	0x0c, 0x41, 0x00, 0x0c, 0x01, 0x00, 0x0c, 0x01, 0x00, 0x1c, 0x01, 0x00,
	0x38, 0x01, 0x00, 0xf0, 0x03, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0x7f, 0x00,
	0x00, 0xe1, 0x00, 0x00, 0xc1, 0x00, 0x00, 0xc1, 0x00, 0x04, 0xc1, 0x00,
	0x04, 0xc1, 0x00, 0x0c, 0xc1, 0x00, 0x0c, 0xc1, 0x00, 0x18, 0x61, 0x00,
	0xf0, 0x3f, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x25 - Percent */
static const uint8_t FMGL_FontFreeSans32Characters_Percent[128] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x08, 0x00, 0xf0, 0x00, 0x08, 0x00, 0xf8, 0x03, 0x04, 0x00,
	0x0c, 0x06, 0x04, 0x00, 0x04, 0x06, 0x02, 0x00, 0x06, 0x04, 0x02, 0x00,
	0x06, 0x04, 0x01, 0x00, 0x06, 0x04, 0x01, 0x00, 0x0c, 0x86, 0x00, 0x00,
	0x18, 0xc3, 0x00, 0x00, 0xf0, 0x41, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00,
	0x00, 0x20, 0x00, 0x00, 0x00, 0x30, 0xf8, 0x00, 0x00, 0x10, 0x8c, 0x01,
	0x00, 0x18, 0x06, 0x03, 0x00, 0x08, 0x02, 0x02, 0x00, 0x04, 0x02, 0x06,
	0x00, 0x04, 0x02, 0x06, 0x00, 0x02, 0x06, 0x02, 0x00, 0x02, 0x06, 0x03,
	0x00, 0x01, 0xfc, 0x01, 0x00, 0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x26 - Ampersand */
static const uint8_t FMGL_FontFreeSans32Characters_Ampersand[128] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
	0xc0, 0x1f, 0x00, 0x60, 0x38, 0x00, 0x60, 0x30, 0x00, 0x20, 0x20, 0x00,
	0x20, 0x30, 0x00, 0x60, 0x30, 0x00, 0x60, 0x38, 0x00, 0xc0, 0x1c, 0x00,
	0x80, 0x07, 0x00, 0x80, 0x03, 0x00, 0xe0, 0x07, 0x00, 0x30, 0x06, 0x01,
	0x18, 0x0c, 0x01, 0x1c, 0x98, 0x01, 0x0c, 0xb0, 0x01, 0x0c, 0xf0, 0x00,
	0x0c, 0xe0, 0x00, 0x0c, 0xe0, 0x00, 0x1c, 0xf0, 0x01, 0x38, 0xb8, 0x03,
	0xf0, 0x0f, 0x07, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x27 - Apostrophe */
static const uint8_t FMGL_FontFreeSans32Characters_Apostrophe[32] =
{
	0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x28 - Parenthesis left */
static const uint8_t FMGL_FontFreeSans32Characters_ParenthesisLeft[64] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x40, 0x00,
	0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x30, 0x00, 0x10, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00,
	0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x10, 0x00, 0x10, 0x00,
	0x30, 0x00, 0x20, 0x00, 0x20, 0x00, 0x60, 0x00, 0x40, 0x00, 0xc0, 0x00,
	0x80, 0x00, 0x00, 0x01
};

/* 0x29 - Parenthesis left */
static const uint8_t FMGL_FontFreeSans32Characters_ParenthesisRight[64] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x18, 0x00,
	0x10, 0x00, 0x30, 0x00, 0x20, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00,
	0x40, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00,
	0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x40, 0x00, 0x60, 0x00,
	0x60, 0x00, 0x20, 0x00, 0x30, 0x00, 0x10, 0x00, 0x10, 0x00, 0x08, 0x00,
	0x08, 0x00, 0x04, 0x00
};

/* 0x2A - Asterisk */
static const uint8_t FMGL_FontFreeSans32Characters_Asterisk[64] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x44, 0x06,
	0xf8, 0x03, 0xe0, 0x00, 0xe0, 0x00, 0x90, 0x01, 0x10, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00
};

/* 0x2B - Plus */
static const uint8_t FMGL_FontFreeSans32Characters_Plus[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x02, 0x00, 0xfc, 0xff, 0x01, 0xfc, 0xff, 0x01, 0x00, 0x02, 0x00,
	0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x2C - Comma */
static const uint8_t FMGL_FontFreeSans32Characters_Comma[64] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00,
	0x38, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x10, 0x00, 0x08, 0x00,
	0x00, 0x00, 0x00, 0x00
};

/* 0x2D - Minus */
static const uint8_t FMGL_FontFreeSans32Characters_Minus[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xfc, 0xff, 0x01, 0xfc, 0xff, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x2E - Period */
static const uint8_t FMGL_FontFreeSans32Characters_Period[32] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
	0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x2F - Slash */
static const uint8_t FMGL_FontFreeSans32Characters_Slash[64] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
	0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00,
	0x30, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x08, 0x00, 0x08, 0x00,
	0x08, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x06, 0x00, 0x02, 0x00,
	0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00
};

/* 0x30 - Zero */
static const uint8_t FMGL_FontFreeSans32Characters_Zero[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00,
	0xe0, 0x1f, 0x00, 0xf0, 0x3c, 0x00, 0x38, 0x70, 0x00, 0x18, 0x70, 0x00,
	0x1c, 0x60, 0x00, 0x1c, 0xe0, 0x00, 0x0c, 0xe0, 0x00, 0x0c, 0xc0, 0x00,
	0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00,
	0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0xe0, 0x00,
	0x1c, 0x60, 0x00, 0x18, 0x60, 0x00, 0x38, 0x70, 0x00, 0x30, 0x38, 0x00,
	0xe0, 0x1f, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x31 - One */
static const uint8_t FMGL_FontFreeSans32Characters_One[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
	0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0x00, 0xe0, 0x07, 0x00,
	0xf0, 0x07, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00,
	0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00,
	0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00,
	0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00,
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x32 - Two */
static const uint8_t FMGL_FontFreeSans32Characters_Two[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00,
	0xf0, 0x3f, 0x00, 0x78, 0x78, 0x00, 0x38, 0x70, 0x00, 0x1c, 0xe0, 0x00,
	0x1c, 0xc0, 0x00, 0x0c, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00,
	0x00, 0xe0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1e, 0x00,
	0x80, 0x07, 0x00, 0xc0, 0x01, 0x00, 0xf0, 0x00, 0x00, 0x38, 0x00, 0x00,
	0x18, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0xfc, 0xff, 0x00,
	0xfc, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x33 - Three */
static const uint8_t FMGL_FontFreeSans32Characters_Three[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00,
	0xf0, 0x1f, 0x00, 0x78, 0x3c, 0x00, 0x18, 0x70, 0x00, 0x1c, 0x60, 0x00,
	0x0c, 0x60, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x70, 0x00,
	0x00, 0x38, 0x00, 0x80, 0x1f, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x70, 0x00,
	0x00, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xc0, 0x00, 0x0e, 0xc0, 0x00,
	0x0c, 0xc0, 0x00, 0x0c, 0xe0, 0x00, 0x1c, 0x60, 0x00, 0x38, 0x78, 0x00,
	0xf0, 0x3f, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x34 - Four */
static const uint8_t FMGL_FontFreeSans32Characters_Four[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
	0x00, 0x18, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x1f, 0x00,
	0x00, 0x1b, 0x00, 0x80, 0x19, 0x00, 0xc0, 0x18, 0x00, 0x40, 0x18, 0x00,
	0x60, 0x18, 0x00, 0x30, 0x18, 0x00, 0x18, 0x18, 0x00, 0x08, 0x18, 0x00,
	0x0c, 0x18, 0x00, 0x06, 0x18, 0x00, 0xfe, 0xff, 0x00, 0xfe, 0xff, 0x00,
	0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00,
	0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x35 - Five */
static const uint8_t FMGL_FontFreeSans32Characters_Five[96] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f, 0x00,
   0xf0, 0x7f, 0x00, 0x30, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00,
   0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x98, 0x0f, 0x00,
   0xf8, 0x3f, 0x00, 0x3c, 0x78, 0x00, 0x0c, 0x60, 0x00, 0x00, 0xe0, 0x00,
   0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00,
   0x00, 0xc0, 0x00, 0x0c, 0xe0, 0x00, 0x1c, 0x60, 0x00, 0x38, 0x38, 0x00,
   0xf0, 0x1f, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x36 - Six */
static const uint8_t FMGL_FontFreeSans32Characters_Six[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
	0xc0, 0x1f, 0x00, 0xf0, 0x38, 0x00, 0x30, 0x70, 0x00, 0x18, 0x60, 0x00,
	0x18, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x00,
	0x8c, 0x1f, 0x00, 0xec, 0x3f, 0x00, 0x3c, 0x70, 0x00, 0x1c, 0xe0, 0x00,
	0x1c, 0xc0, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00,
	0x0c, 0xc0, 0x00, 0x18, 0xe0, 0x00, 0x18, 0x60, 0x00, 0x70, 0x78, 0x00,
	0xe0, 0x3f, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x37 - Seven */
static const uint8_t FMGL_FontFreeSans32Characters_Seven[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x00,
	0xfc, 0xff, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x60, 0x00,
	0x00, 0x30, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0c, 0x00,
	0x00, 0x0c, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00,
	0x00, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00,
	0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xe0, 0x00, 0x00,
	0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x38 - Eight */
static const uint8_t FMGL_FontFreeSans32Characters_Eight[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00,
	0xe0, 0x1f, 0x00, 0x70, 0x38, 0x00, 0x18, 0x70, 0x00, 0x18, 0x60, 0x00,
	0x1c, 0x60, 0x00, 0x1c, 0x60, 0x00, 0x18, 0x60, 0x00, 0x38, 0x70, 0x00,
	0x70, 0x3c, 0x00, 0xe0, 0x1f, 0x00, 0xf0, 0x3f, 0x00, 0x38, 0x70, 0x00,
	0x1c, 0x60, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00,
	0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00, 0x1c, 0x60, 0x00, 0x38, 0x70, 0x00,
	0xf0, 0x3f, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x39 - Nine */
static const uint8_t FMGL_FontFreeSans32Characters_Nine[96] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00,
   0xe0, 0x1f, 0x00, 0x70, 0x3c, 0x00, 0x18, 0x70, 0x00, 0x1c, 0x60, 0x00,
   0x0c, 0x60, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0xc0, 0x00,
   0x0c, 0xe0, 0x00, 0x1c, 0xe0, 0x00, 0x18, 0xf0, 0x00, 0x78, 0xfc, 0x00,
   0xe0, 0xcf, 0x00, 0x00, 0xc1, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x60, 0x00,
   0x00, 0x60, 0x00, 0x0c, 0x60, 0x00, 0x18, 0x30, 0x00, 0x38, 0x38, 0x00,
   0xf0, 0x1f, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x3A - Colon */
static const uint8_t FMGL_FontFreeSans32Characters_Colon[32] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
	0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x3B - Semicolon */
static const uint8_t FMGL_FontFreeSans32Characters_Semicolon[32] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
	0x38, 0x20, 0x20, 0x10, 0x10, 0x08, 0x00, 0x00
};

/* 0x3C - Less */
static const uint8_t FMGL_FontFreeSans32Characters_Less[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0xc0, 0x01, 0x00, 0x78, 0x00, 0x00, 0x1e, 0x00, 0xc0, 0x03, 0x00,
	0xf0, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x78, 0x00, 0x00,
	0xe0, 0x01, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xe0, 0x01,
	0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* 0x3D - Equal */
static const uint8_t FMGL_FontFreeSans32Characters_Equal[96] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x01, 0xfc, 0xff, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xfc, 0xff, 0x01, 0xfc, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


#endif /* FMGL_FONTS_INCLUDE_FREESANS32_H_ */
